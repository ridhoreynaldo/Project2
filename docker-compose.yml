version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel_app
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
      # ðŸ”¹ Koneksi utama ke SQL Server eksternal
      - DB_CONNECTION=sqlsrv
      - DB_HOST=192.168.3.8
      - DB_PORT=78
      - DB_DATABASE=dbAsset
      - DB_USERNAME=asset
      - DB_PASSWORD=j3mburiT4_

      # ðŸ”¹ Koneksi kedua (QUINARY)
      - DB_QUINARY_CONNECTION=sqlsrv
      - DB_QUINARY_HOST=192.168.3.8
      - DB_QUINARY_PORT=78
      - DB_QUINARY_DATABASE=dbAsrama
      - DB_QUINARY_USERNAME=asset
      - DB_QUINARY_PASSWORD=j3mburiT4_

      # ðŸ”¹ Koneksi ketiga (SECONDARY)
      - DB_SECONDARY_CONNECTION=sqlsrv
      - DB_SECONDARY_HOST=192.168.3.251
      - DB_SECONDARY_PORT=85
      - DB_SECONDARY_DATABASE=qualitydb
      - DB_SECONDARY_USERNAME=$$ButuhLibur7654!!##
      - DB_SECONDARY_PASSWORD=T3n!m@nuK76+_

    volumes:
      - ./:/var/www/html
    networks:
      - laravel
    extra_hosts:
      - "host.docker.internal:host-gateway"  # penting agar bisa akses IP LAN dari dalam container

  nginx:
    image: nginx:alpine
    container_name: laravel_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - laravel
    depends_on:
      - app

  redis:
    image: redis:7-alpine
    container_name: laravel_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - laravel

networks:
  laravel:
    driver: bridge